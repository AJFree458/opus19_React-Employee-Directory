{"version":3,"sources":["components/Jumbotron/index.js","components/Search/index.js","components/Table/index.js","components/TableData/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","Search","props","type","name","value","searchTerm","onChange","handleChange","placeholder","onClick","handleFormSubmit","Table","children","TableData","id","firstName","lastName","role","department","office","telephone","App","state","employee","search","handleInputChange","event","console","log","target","setState","preventDefault","departSearch","then","res","data","status","Error","message","results","error","catch","err","depart","employeeTable","filter","toLowerCase","indexOf","clickSorter","category","sort","a","b","textA","textB","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65bfb713.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4 text-center\">\n          University Employee Directory\n        </h1>\n        <p className=\"lead text-center\">\n          Filter by First Name or Last Name in the table headings, or use the search to find a department.\n        </p>\n      </div>\n    </div>\n  )\n};\n\nexport default Jumbotron;\n","import React from \"react\";\n\nfunction Search(props) {\n  return (\n    <div >\n      <form className=\"form form-row my-2\">\n        <div className=\"col\">\n          <input\n            type=\"text\"\n            name=\"searchTerm\"\n            value={props.searchTerm}\n            onChange={props.handleChange}\n            className=\"form-control\"\n            placeholder=\"Search\"\n          />\n        </div>\n        <div className=\"col-2\">\n          <button onClick={props.handleFormSubmit} className=\"btn btn-light btn-block\">Submit</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default Search;\n","import React from \"react\";\n\nfunction Table(props) {\n  return (\n    <table className=\"table table-striped table-bordered mt-4\">\n        {props.children}\n    </table>\n  )\n}\n\nexport default Table;\n","import React from 'react';\n\nfunction TableData(props) {\n  return (\n    <tr>\n      <td>{props.id}</td>\n      <td>{props.firstName}</td>\n      <td>{props.lastName}</td>\n      <td>{props.role}</td>\n      <td>{props.department}</td>\n      <td>{props.office}</td>\n      <td>{props.telephone}</td>\n    </tr>\n  )\n}\n\nexport default TableData;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Jumbotron from \"./components/Jumbotron\";\nimport Search from \"./components/Search\";\nimport Table from \"./components/Table\"\nimport TableData from \"./components/TableData\";\nimport employee from \"./employee.json\";\n\n\nclass App extends Component {\n\n  state = {\n    employee,\n    search: \"\",\n  };\n  \n  handleInputChange = event => {\n    console.log(event.target.value);\n    this.setState({ search: event.target.value });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    this.departSearch(this.state.search)\n      .then(res => {\n        if (res.data.status === \"error\") {\n          throw new Error(res.data.message);\n        }\n        this.setState({ results: res.data.message, error: \"\" });\n      })\n      .catch(err => this.setState({ error: err.message }));\n  };\n\n  departSearch = (depart) => {\n    const employeeTable = this.state.employee;\n    employeeTable.filter(function(employee) {\n      return employeeTable.department.toLowerCase.indexOf(depart.toLowerCase) !== -1;\n    })\n    console.log(employeeTable);\n    return employeeTable;\n  }\n  \n    // Sort columns\n  clickSorter = (category) => {\n    const employee = this.state.employee.sort(function (a, b) {\n      var textA = a[category];\n      var textB = b[category];\n      return textA < textB ? -1 : textA > textB ? 1 : 0;\n    });\n  \n    this.setState({ employee });\n  };\n\n  render() {\n    return (\n      <div className={\"container\"}>\n        <Jumbotron />\n        <Search \n          handleInputChange={this.handleInputChange}\n          search={this.state.search}\n        />\n          <Table>\n            <thead className=\"thead-dark\">\n              <th  onClick={() => this.clickSorter(\"id\")}>\n                    <button className=\"tableButton\">ID</button></th>\n              <th  onClick={() => this.clickSorter(\"firstName\")}>\n                    <button className=\"tableButton\">First Name</button></th>\n              <th onClick={() => this.clickSorter(\"lastName\")}>\n                    <button className=\"tableButton\">Last Name</button></th>\n              <th>Role</th>\n              <th>Department</th>\n              <th>Office</th>\n              <th>Telephone</th>\n            </thead>\n            <tbody>\n            {this.state.employee.map(employee => (\n              <TableData\n                id={employee.id}\n                firstName={employee.firstName}\n                lastName={employee.lastName}\n                role={employee.role}\n                department={employee.department}\n                office={employee.office}\n                telephone={employee.telephone}\n              />\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}